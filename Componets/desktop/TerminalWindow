import React, { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import WindowFrame from './WindowFrame';

const commands = {
  discord: () => `https://discord.gg/5ZQF6fdXze`
};

export default function TerminalWindow({ position, onClose, onFocus }) {
  const [input, setInput] = useState('');
  const [history, setHistory] = useState([
    { type: 'output', text: 'Welcome to Scarlett\'s Terminal v1.0.0' },
    { type: 'output', text: 'Type "discord" to get the invite link.' },
    { type: 'prompt', text: '' }
  ]);
  const [commandHistory, setCommandHistory] = useState([]);
  const [historyIndex, setHistoryIndex] = useState(-1);
  const terminalRef = useRef(null);
  const inputRef = useRef(null);

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [history]);

  const executeCommand = (cmd) => {
    const [command, ...args] = cmd.toLowerCase().trim().split(' ');
    
    setHistory(prev => [
      ...prev,
      { type: 'input', text: `~ $ ${cmd}` }
    ]);

    setCommandHistory(prev => [...prev, cmd]);
    setHistoryIndex(-1);

    if (commands[command]) {
      const result = commands[command](args);
      
      setTimeout(() => {
        setHistory(prev => [
          ...prev,
          { type: 'output', text: result },
          { type: 'prompt', text: '' }
        ]);
      }, 100);
    } else {
      setTimeout(() => {
        setHistory(prev => [
          ...prev,
          { type: 'error', text: `Command not found: ${command}. The only available command is "discord".` },
          { type: 'prompt', text: '' }
        ]);
      }, 100);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter') {
      if (input.trim()) {
        executeCommand(input);
      }
      setInput('');
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (commandHistory.length > 0) {
        const newIndex = historyIndex === -1 ? commandHistory.length - 1 : Math.max(0, historyIndex - 1);
        setHistoryIndex(newIndex);
        setInput(commandHistory[newIndex]);
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex !== -1) {
        const newIndex = historyIndex === commandHistory.length - 1 ? -1 : historyIndex + 1;
        setHistoryIndex(newIndex);
        setInput(newIndex === -1 ? '' : commandHistory[newIndex]);
      }
    }
  };

  return (
    <WindowFrame
      title="Terminal"
      position={position}
      onClose={onClose}
      onFocus={onFocus}
      width={700}
      height={500}
    >
      <div 
        className="h-full bg-gray-900 text-green-400 font-mono text-sm flex flex-col"
        onClick={() => inputRef.current?.focus()}
      >
        {/* Terminal Content */}
        <div 
          ref={terminalRef}
          className="flex-1 overflow-auto p-4 space-y-1"
        >
          {history.map((item, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.1 }}
              className={`${
                item.type === 'input' 
                  ? 'text-blue-400' 
                  : item.type === 'error' 
                  ? 'text-red-400' 
                  : 'text-green-400'
              }`}
            >
              <pre className="whitespace-pre-wrap font-mono">
                {item.text}
              </pre>
            </motion.div>
          ))}
          
          {/* Current Input Line */}
          <div className="flex items-center text-blue-400">
            <span className="mr-2">~ $</span>
            <input
              ref={inputRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              className="flex-1 bg-transparent outline-none text-green-400 caret-green-400"
              autoComplete="off"
              spellCheck="false"
            />
            <motion.div
              animate={{ opacity: [1, 0] }}
              transition={{ duration: 0.8, repeat: Infinity }}
              className="w-2 h-4 bg-green-400 ml-1"
            />
          </div>
        </div>
      </div>
    </WindowFrame>
  );
}